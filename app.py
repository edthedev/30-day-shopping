import os
import logging
from datetime import timedelta

APP_ROOT = os.path.dirname(__file__)
_APP_NAME = 'shopping'

# -----------------------------------
# Logging
# -----------------------------------
_LOG_FILE = os.path.join(APP_ROOT, _APP_NAME + '.log')
logging.basicConfig(filename=_LOG_FILE, level=logging.DEBUG)
_LOGGER = logging.getLogger(__name__)
_LOGGER.error('start')

# -----------------------------------
# Database
# -----------------------------------
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import func
from sqlalchemy import (
    Column,
    String,
    Integer,
    Float,
    DateTime)
from sqlalchemy import create_engine


Base = declarative_base()

class CommonColumns(Base):
    __abstract__ = True
    _created = Column(DateTime, default=func.now())
    _updated = Column(DateTime, default=func.now(), onupdate=func.now())

class Purchase(CommonColumns):
    __tablename__ = 'purchase'
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String(255))
    price = Column(Float(precision=2))
    expected = Column(DateTime)
    bought = Column(DateTime)
    resolved = Column(DateTime)

#    class Meta:
#        database = db

    def __repr__(self):
        _data = self.__dict__['_data']
        return "{expected} - {name} ${price}".format(**_data)

    def save(self):
        ''' Add default behavior for expected purchase date. '''
        if not self.expected:
            if self.price:
                # Wait one day per dollar of cost.
                self.expected = self.added + timedelta(days=int(self.price))
            else:
                # Or 30 days if price is unknown.
                self.expected = self.added + timedelta(days=30)
        super(Purchase, self).save()

engine = create_engine('sqlite:///shopping2.db')
Base.metadata.create_all(engine, checkfirst=True)
_LOGGER.debug('finished db')

# -----------------------------------
# API
# -----------------------------------

from eve_sqlalchemy.decorators import registerSchema

registerSchema('purchase')(Purchase)
# The default schema is generated by the decorator
DOMAIN = {
    'purchase': Purchase._eve_schema['purchase'],
}

SETTINGS = {
    'DOMAIN': DOMAIN,
}

from eve import Eve
from eve_sqlalchemy import SQL
from eve_sqlalchemy.validation import ValidatorSQL

app = Eve(settings=SETTINGS, validator=ValidatorSQL, data=SQL)

_LOGGER.debug('built eve app')
# Serve index for local testing...

from flask import send_from_directory
@app.route('/index', methods=['GET'])
def index():
    _LOGGER.error('Index?')
    return send_from_directory(
        os.path.join(APP_ROOT), 'index.html')

@app.route('/static/<filepath>', methods=['GET'])
def send_static(filepath):
    _LOGGER.error('Duh?')
    app.logger.error('Requested static file %s', filepath)
    static_file = os.path.join(APP_ROOT, 'static', filepath)
    app.logger.error('Resolved static file to %s', static_file)
    path, filename = os.path.split(static_file)
    return send_from_directory(path, filename)

    #return send_from_directory(
    #    os.path.join(APP_ROOT, 'static'), path)

# bind SQLAlchemy
db = app.data.driver
Base.metadata.bind = db.engine
db.Model = Base
_LOGGER.debug('about to start')
app.run(debug=True)
